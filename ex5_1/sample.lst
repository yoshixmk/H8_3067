H8S,H8/300 SERIES C COMPILER (Ver. 2.0D for Evaluation) 6-Feb-2015  12:30:47  PAGE   1

************ SOURCE LISTING ************

FILE NAME: sample.c

  Seq File        Line Pi 0----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+
    1 sample.c       1     #include <sci.h>
  138 sample.c       2     #include <reg3067.h>
  309 sample.c       3     #include <machine.h>
  416 sample.c       4     #include <RTL8019AS_register.h>
  455 sample.c       5     #include <string.h>
  553 sample.c       6     
  554 sample.c       7     unsigned char src_IP[4];
  555 sample.c       8     unsigned char src_MAC[6];
  556 sample.c       9     unsigned char dst_IP[4];
  557 sample.c      10     unsigned char packet[256];
  558 sample.c      11     
  559 sample.c      12     typedef struct{
  560 sample.c      13             /*イーサネットヘッダ(14byte)*/
  561 sample.c      14             unsigned char eth_dst_MAC[6];
  562 sample.c      15             unsigned char eth_src_MAC[6];
  563 sample.c      16             unsigned short eth_ethernet_type;
  564 sample.c      17             /* ARPメッセージ(28byte) */
  565 sample.c      18             unsigned short arp_hardware_type;
  566 sample.c      19             unsigned short arp_protocol_type;
  567 sample.c      20             unsigned char arp_hardware_length;
  568 sample.c      21             unsigned char arp_protocol_length;
  569 sample.c      22             unsigned short arp_operation;
  570 sample.c      23             unsigned char arp_src_MAC[6];
  571 sample.c      24             unsigned char arp_src_IP[4];
  572 sample.c      25             unsigned char arp_dst_MAC[6];
  573 sample.c      26             unsigned char arp_dst_IP[4];
  574 sample.c      27     } ARP_PACKET;
  575 sample.c      28     
  576 sample.c      29     typedef struct
  577 sample.c      30     {
  578 sample.c      31             /* イーサネット・ヘッダ(14byte) */
  579 sample.c      32             unsigned char eth_dst_MAC[6];
  580 sample.c      33             unsigned char eth_src_MAC[6];
  581 sample.c      34             unsigned short eth_ethernet_type;
  582 sample.c      35     
  583 sample.c      36             /* IPヘッダ(20byte) */
  584 sample.c      37             unsigned char ip_version_length;
  585 sample.c      38             unsigned char ip_service_type;
  586 sample.c      39             unsigned short ip_total_length;
  587 sample.c      40             unsigned short ip_id;
  588 sample.c      41             unsigned short ip_flags_fragment_offset;
  589 sample.c      42             unsigned char ip_time_to_live;
  590 sample.c      43             unsigned char ip_protocol;
  591 sample.c      44             unsigned short ip_checksum;
  592 sample.c      45             unsigned char ip_src_IP[4];
  593 sample.c      46             unsigned char ip_dst_IP[4];
  594 sample.c      47     
  595 sample.c      48             /* pingメッセージ(40byte) */
  596 sample.c      49             unsigned char ping_type;
  597 sample.c      50             unsigned char ping_code;
  598 sample.c      51             unsigned short ping_checksum;
  599 sample.c      52             unsigned short ping_id;
  600 sample.c      53             unsigned short ping_sequence_number;
  601 sample.c      54             unsigned char ping_data[32];
  602 sample.c      55     } PING_PACKET;
  603 sample.c      56     
  604 sample.c      57     void ms_timer(unsigned short ms)
  605 sample.c      58     {
  606 sample.c      59             int j;
  607 sample.c      60     
  608 sample.c      61             TSTR |= 0x04;
  609 sample.c      62             for(j=0;j<ms;j++){
  610 sample.c      63                     while((TISRA & 0x04) != 0x04);
  611 sample.c      64                     TISRA &= 0xFB;
  612 sample.c      65             }
  613 sample.c      66             TSTR &= 0xFB;
  614 sample.c      67     }
  615 sample.c      68     
  616 sample.c      69     void us_timer(unsigned short us)
  617 sample.c      70     {
  618 sample.c      71             int j;
  619 sample.c      72     
  620 sample.c      73             TSTR |= 0x02;
  621 sample.c      74             for(j=0;j<us;j++){
  622 sample.c      75                     while((TISRA & 0x02) != 0x02);
  623 sample.c      76                     TISRA &= 0xFD;
  624 sample.c      77             }
  625 sample.c      78             TSTR &= 0xFD;
  626 sample.c      79     }
  627 sample.c      80     
  628 sample.c      81     char matrix_key_read(void)
  629 sample.c      82     {
  630 sample.c      83             char key;
  631 sample.c      84             unsigned char column, row;
  632 sample.c      85     
  633 sample.c      86             key = 0;
  634 sample.c      87             column = 0x10;
  635 sample.c      88     
  636 sample.c      89             while(column <= 0x40)
  637 sample.c      90             {
  638 sample.c      91                     P4DR = ~column;
  639 sample.c      92     
  640 sample.c      93                     row =(~P4DR) & 0x0f;
  641 sample.c      94     
  642 sample.c      95                     if(row != 0)
  643 sample.c      96                     {
  644 sample.c      97                             switch(column | row)
  645 sample.c      98                             {
  646 sample.c      99                                     case 0x11 : key ='1'; break;
  647 sample.c     100                                     case 0x12 : key ='2'; break;
  648 sample.c     101                                     case 0x14 : key ='3'; break;
  649 sample.c     102                                     case 0x18 : key ='4'; break;
  650 sample.c     103     
  651 sample.c     104                                     case 0x21 : key ='5'; break;
  652 sample.c     105                                     case 0x22 : key ='6'; break;
  653 sample.c     106                                     case 0x24 : key ='7'; break;
  654 sample.c     107                                     case 0x28 : key ='8'; break;
  655 sample.c     108     
  656 sample.c     109                                     case 0x41 : key ='9'; break;
  657 sample.c     110                                     case 0x42 : key ='.'; break;
  658 sample.c     111                                     case 0x44 : key ='0'; break;
  659 sample.c     112                                     case 0x48 : key ='#'; break;
  660 sample.c     113     
  661 sample.c     114                                     default : key = 0; break;
  662 sample.c     115                             }
  663 sample.c     116                     }
  664 sample.c     117                     column = column << 1;
  665 sample.c     118             }
  666 sample.c     119             return key;
  667 sample.c     120     }
  668 sample.c     121     
  669 sample.c     122     
  670 sample.c     123     
  671 sample.c     124     void LCD_write(char data, char RS)
  672 sample.c     125     {
  673 sample.c     126             PBDR = data & 0xF0;
  674 sample.c     127             if(RS == 1)
  675 sample.c     128             {
  676 sample.c     129                     PBDR |= 0x02;/*RSに1をセットする*/
  677 sample.c     130             }
  678 sample.c     131             else
  679 sample.c     132             {
  680 sample.c     133                     PBDR &= 0xFD;/*RSに0をセットする*/
  681 sample.c     134             }
  682 sample.c     135     
  683 sample.c     136             ms_timer(1);/*40ns以上の時間待ち*/
  684 sample.c     137             PBDR |= 0x01;/*Eに1をセットする*/
  685 sample.c     138             ms_timer(1);/*230ns以上待ち*/
  686 sample.c     139             PBDR &= 0xFE;/*Eに0をセットする*/
  687 sample.c     140     }
  688 sample.c     141     
  689 sample.c     142     void LCD_display(char code)
  690 sample.c     143     {
  691 sample.c     144             LCD_write(code,1);
  692 sample.c     145             LCD_write(code << 4,1);
  693 sample.c     146             ms_timer(1);/*40us以上待ち*/
  694 sample.c     147     }
  695 sample.c     148     
  696 sample.c     149     void LCD_control(char code)
  697 sample.c     150     {
  698 sample.c     151             LCD_write(code, 0);
  699 sample.c     152             LCD_write(code << 4, 0);
  700 sample.c     153             ms_timer(1);/*40us以上待ち*/
  701 sample.c     154     }
  702 sample.c     155     
  703 sample.c     156     void LCD_init(void)
  704 sample.c     157     {
  705 sample.c     158             ms_timer(15);
  706 sample.c     159             LCD_write(0x30,0);
  707 sample.c     160             ms_timer(1);
  708 sample.c     161             LCD_write(0x30,0);
  709 sample.c     162             ms_timer(1);
  710 sample.c     163             LCD_write(0x30,0);
  711 sample.c     164             ms_timer(5);
  712 sample.c     165             LCD_write(0x20,0);
  713 sample.c     166             ms_timer(1);
  714 sample.c     167             LCD_control(0x28);
  715 sample.c     168             LCD_control(0x08);
  716 sample.c     169             LCD_control(0x0C);
  717 sample.c     170             LCD_control(0x06);
  718 sample.c     171             LCD_control(0x01);
  719 sample.c     172     }
  720 sample.c     173     unsigned char NIC_read(address)
  721 sample.c     174     {
  722 sample.c     175             unsigned char data;
  723 sample.c     176             P1DR = address;
  724 sample.c     177             P3DDR = 0x00;
  725 sample.c     178             P6DR &= 0xEF;
  726 sample.c     179             data = P3DR;
  727 sample.c     180             P6DR |= 0x10;
  728 sample.c     181             return data;
  729 sample.c     182     }
  730 sample.c     183     void NIC_write(unsigned char address, unsigned char data)
  731 sample.c     184     {
  732 sample.c     185             P1DR = address;
  733 sample.c     186             P3DDR = 0xFF;
  734 sample.c     187             P6DR &= 0xDF;
  735 sample.c     188             P3DR = data;
  736 sample.c     189             P6DR |= 0x20;
  737 sample.c     190     }
  738 sample.c     191     void NIC_init(void)
  739 sample.c     192     {
  740 sample.c     193             unsigned short i;
  741 sample.c     194             unsigned char data;
  742 sample.c     195             PADR |= 0x80;
  743 sample.c     196             ms_timer(10);
  744 sample.c     197             PADR &= 0x7F;
  745 sample.c     198             ms_timer (10);
  746 sample.c     199             data = NIC_read(RP);
  747 sample.c     200             NIC_write(RP, data);
  748 sample.c     201             ms_timer (10);
  749 sample.c     202             NIC_write(CR, 0x21);
  750 sample.c     203             NIC_write(DCR, 0x4A);
  751 sample.c     204             NIC_write(RBCR0, 0);
  752 sample.c     205             NIC_write(RBCR1, 0);
  753 sample.c     206             NIC_write(RCR, 0x20);
  754 sample.c     207             NIC_write(TCR, 0x02);
  755 sample.c     208             NIC_write(TPSR, 0x40);
  756 sample.c     209             NIC_write(PSTART, 0x46);
  757 sample.c     210             NIC_write(BNRY, 0x46);
  758 sample.c     211             NIC_write(PSTOP, 0x60);
  759 sample.c     212             NIC_write(IMR, 0x00);
  760 sample.c     213             NIC_write(ISR, 0xFF);
  761 sample.c     214             NIC_write(RBCR0, 12);
  762 sample.c     215             NIC_write(RBCR1, 0);
  763 sample.c     216             NIC_write(RSAR0, 0x00);
  764 sample.c     217             NIC_write(RSAR1, 0x00);
  765 sample.c     218             NIC_write(CR, 0x0A);
  766 sample.c     219             for (i = 0; i < 6; i += 2) {
  767 sample.c     220                     src_MAC[i + 1] = NIC_read(RDMAP);
  768 sample.c     221                     NIC_read(RDMAP);
  769 sample.c     222                     src_MAC[i] = NIC_read(RDMAP);
  770 sample.c     223                     NIC_read(RDMAP);
  771 sample.c     224             }
  772 sample.c     225             do {
  773 sample.c     226                     data = NIC_read(ISR);
  774 sample.c     227             } while ((data & 0x40) == 0x00);
  775 sample.c     228             NIC_write(CR, 0x61);
  776 sample.c     229             NIC_write(PAR0, src_MAC[0]);
  777 sample.c     230             NIC_write(PAR1, src_MAC[1]);
  778 sample.c     231             NIC_write(PAR2, src_MAC[2]);
  779 sample.c     232             NIC_write(PAR3, src_MAC[3]);
  780 sample.c     233             NIC_write(PAR4, src_MAC[4]);
  781 sample.c     234             NIC_write(PAR5, src_MAC[5]);
  782 sample.c     235             NIC_write(CURR, 0x47);
  783 sample.c     236             NIC_write(MAR0, 0);
  784 sample.c     237             NIC_write(MAR1, 0);
  785 sample.c     238             NIC_write(MAR2, 0);
  786 sample.c     239             NIC_write(MAR3, 0);
  787 sample.c     240             NIC_write(MAR4, 0);
  788 sample.c     241             NIC_write(MAR5, 0);
  789 sample.c     242             NIC_write(MAR6, 0);
  790 sample.c     243             NIC_write(MAR7, 0);
  791 sample.c     244             NIC_write(CR, 0x21);
  792 sample.c     245             NIC_write(RCR, 0x04);
  793 sample.c     246             NIC_write(CR, 0x22);
  794 sample.c     247             NIC_write(TCR, 0x00);
  795 sample.c     248             NIC_write(IMR, 0x00);
  796 sample.c     249     }
  797 sample.c     250     
  798 sample.c     251     void MAC_to_str(unsigned char *MAC, char *str)
  799 sample.c     252     {
  800 sample.c     253             unsigned short i, n;
  801 sample.c     254             unsigned char nibble;
  802 sample.c     255             n = 0;
  803 sample.c     256             for(i = 0; i < 6; i++)
  804 sample.c     257             {
  805 sample.c     258                     nibble = (MAC[i] & 0xF0) >> 4;
  806 sample.c     259                     if (nibble < 10)
  807 sample.c     260                     {
  808 sample.c     261                             str[n] = '0' + nibble;
  809 sample.c     262                     }
  810 sample.c     263                     else
  811 sample.c     264                     {
  812 sample.c     265                             str[n] = 'A' + nibble - 10;
  813 sample.c     266                     }
  814 sample.c     267                     n++;
  815 sample.c     268                     nibble = MAC[i] & 0x0F;
  816 sample.c     269                     if (nibble < 10)
  817 sample.c     270                     {
  818 sample.c     271                             str[n] = '0' + nibble;
  819 sample.c     272                     }
  820 sample.c     273                     else
  821 sample.c     274                     {
  822 sample.c     275                             str[n] = 'A' + nibble - 10;
  823 sample.c     276                     }
  824 sample.c     277                     n++;
  825 sample.c     278             }
  826 sample.c     279             str[n] = 0x00;
  827 sample.c     280     }
  828 sample.c     281     
  829 sample.c     282     void LCD_print(char *str)
  830 sample.c     283     {
  831 sample.c     284             for( ; *str!= '\0'; str++)
  832 sample.c     285             {
  833 sample.c     286                     LCD_display(*str);
  834 sample.c     287             }
  835 sample.c     288     }
  836 sample.c     289     void buzzer(void) /*using while()*/
  837 sample.c     290     {
  838 sample.c     291             char key;
  839 sample.c     292             key=matrix_key_read();
  840 sample.c     293             PADR |= 0x10;
  841 sample.c     294             switch(key){
  842 sample.c     295                     case '1' :
  843 sample.c     296                             us_timer(956);
  844 sample.c     297                             PADR &= 0xEF;
  845 sample.c     298                             us_timer(956); break;
  846 sample.c     299                     case '2' :
  847 sample.c     300                             us_timer(852);
  848 sample.c     301                             PADR &= 0xEF;
  849 sample.c     302                             us_timer(852); break;
  850 sample.c     303                     case '3' :
  851 sample.c     304                             us_timer(759);
  852 sample.c     305                             PADR &= 0xEF;
  853 sample.c     306                             us_timer(759); break;
  854 sample.c     307                     case '4' :
  855 sample.c     308                             us_timer(716);
  856 sample.c     309                             PADR &= 0xEF;
  857 sample.c     310                             us_timer(716); break;
  858 sample.c     311                     case '5' :
  859 sample.c     312                             us_timer(638);
  860 sample.c     313                             PADR &= 0xEF;
  861 sample.c     314                             us_timer(638); break;
  862 sample.c     315                     case '6' :
  863 sample.c     316                             us_timer(568);
  864 sample.c     317                             PADR &= 0xEF;
  865 sample.c     318                             us_timer(568); break;
  866 sample.c     319                     case '7' :
  867 sample.c     320                             us_timer(506);
  868 sample.c     321                             PADR &= 0xEF;
  869 sample.c     322                             us_timer(506); break;
  870 sample.c     323                     case '8' :
  871 sample.c     324                             us_timer(478);
  872 sample.c     325                             PADR &= 0xEF;
  873 sample.c     326                             us_timer(478); break;
  874 sample.c     327                     case '9' :
  875 sample.c     328                             us_timer(423);
  876 sample.c     329                             PADR &= 0xEF;
  877 sample.c     330                             us_timer(423); break;
  878 sample.c     331                     case '0' :
  879 sample.c     332                             us_timer(379);
  880 sample.c     333                             PADR &= 0xEF;
  881 sample.c     334                             us_timer(379); break;
  882 sample.c     335                     default : key = 0; break;
  883 sample.c     336             }
  884 sample.c     337     }
  885 sample.c     338     void IP_to_str(unsigned char *IP, char *str)
  886 sample.c     339     {
  887 sample.c     340             unsigned short i, n;
  888 sample.c     341             n = 0;
  889 sample.c     342             for (i = 0; i < 4; i++)
  890 sample.c     343             {
  891 sample.c     344                     str[n] = '0' + (IP[i] / 100);
  892 sample.c     345                     n++;
  893 sample.c     346                     str[n] = '0' + (IP[i] % 100 / 10);
  894 sample.c     347                     n++;
  895 sample.c     348                     str[n] = '0' + (IP[i] % 10);
  896 sample.c     349                     if (i < 3)
  897 sample.c     350                     {
  898 sample.c     351                             n++;
  899 sample.c     352                             str[n] = '.';
  900 sample.c     353                     }
  901 sample.c     354                     n++;
  902 sample.c     355             }
  903 sample.c     356             str[n] = 0x00;
  904 sample.c     357     }
  905 sample.c     358     void packet_send(unsigned char *packet, unsigned short size)
  906 sample.c     359     {
  907 sample.c     360             unsigned short i;
  908 sample.c     361             unsigned char data;
  909 sample.c     362             unsigned char size_H, size_L;
  910 sample.c     363             size_L = (unsigned char)(size & 0x00FF);
  911 sample.c     364             size_H = (unsigned char)(size >> 8);
  912 sample.c     365             NIC_write(CR, 0x22);
  913 sample.c     366             NIC_write(RBCR0, size_L);
  914 sample.c     367             NIC_write(RBCR1, size_H);
  915 sample.c     368             NIC_write(RSAR0, 0x00);
  916 sample.c     369             NIC_write(RSAR1, 0x40);
  917 sample.c     370             NIC_write(CR, 0x12);
  918 sample.c     371             for (i = 0; i < size; i++)
  919 sample.c     372             {
  920 sample.c     373                     NIC_write(RDMAP,packet[i]);
  921 sample.c     374             }
  922 sample.c     375             do
  923 sample.c     376             {
  924 sample.c     377                     data = NIC_read(ISR);
  925 sample.c     378             } while ((data & 0x40) == 0x00);
  926 sample.c     379             NIC_write(CR, 0x22);
  927 sample.c     380             NIC_write(TBCR0, size_L);
  928 sample.c     381             NIC_write(TBCR1, size_H);
  929 sample.c     382             NIC_write(TPSR, 0x40);
  930 sample.c     383             NIC_write(CR, 0x26);
  931 sample.c     384             do
  932 sample.c     385             {
  933 sample.c     386                     data = NIC_read(CR);
  934 sample.c     387             }while ((data & 0x04) == 0x04);
  935 sample.c     388     }
  936 sample.c     389     unsigned char packet_receive(unsigned char *packet)
  937 sample.c     390     {
  938 sample.c     391             unsigned short i;
  939 sample.c     392             unsigned short size;
  940 sample.c     393             unsigned char data;
  941 sample.c     394             unsigned char size_H,size_L;
  942 sample.c     395             unsigned char boundary_page,start_page,current_page;
  943 sample.c     396             unsigned char header[4];
  944 sample.c     397     
  945 sample.c     398             NIC_write(CR,0x22);
  946 sample.c     399             boundary_page = NIC_read(BNRY);
  947 sample.c     400             NIC_write(CR,0x62);
  948 sample.c     401             current_page = NIC_read(CURR);
  949 sample.c     402     
  950 sample.c     403             if(current_page < boundary_page){
  951 sample.c     404                     current_page += (0x60 - 0x46);
  952 sample.c     405             }
  953 sample.c     406             if(current_page == boundary_page + 1){
  954 sample.c     407                     return 1;
  955 sample.c     408             }
  956 sample.c     409             start_page = boundary_page + 1;
  957 sample.c     410             if(start_page == 0x60){
  958 sample.c     411                     start_page = 0x46;
  959 sample.c     412             }
  960 sample.c     413     
  961 sample.c     414             NIC_write(CR,0x22);
  962 sample.c     415             NIC_write(RBCR0,4);
  963 sample.c     416             NIC_write(RBCR1,0);
  964 sample.c     417             NIC_write(RSAR0,0);
  965 sample.c     418             NIC_write(RSAR1,start_page);
  966 sample.c     419             NIC_write(CR,0x0A);
  967 sample.c     420             for(i=0;i<4;i++){
  968 sample.c     421                     header[i] = NIC_read(RDMAP);
  969 sample.c     422             }
  970 sample.c     423             do{
  971 sample.c     424                     data =NIC_read(ISR);
  972 sample.c     425             }while((data & 0x40) == 0x00);
  973 sample.c     426     
  974 sample.c     427             NIC_write(CR,0x22);
  975 sample.c     428             size_L = header[2];
  976 sample.c     429             size_H = header[3];
  977 sample.c     430             size = ((unsigned short)size_H << 8) + (unsigned short)size_L;
  978 sample.c     431             NIC_write(RBCR0,size_L);
  979 sample.c     432             NIC_write(RBCR1,size_H);
  980 sample.c     433             NIC_write(RSAR0,0);
  981 sample.c     434             NIC_write(RSAR1,start_page);
  982 sample.c     435             NIC_write(CR, 0x0A);
  983 sample.c     436             for(i=0;i<4;i++){
  984 sample.c     437                 NIC_read(RDMAP);
  985 sample.c     438         }
  986 sample.c     439         for (i = 0; i < (size - 4); i++)
  987 sample.c     440         {
  988 sample.c     441                     packet[i] = NIC_read(RDMAP);
  989 sample.c     442                     if(i >= 256){
  990 sample.c     443                             NIC_read(RDMAP);
  991 sample.c     444                     }
  992 sample.c     445             }
  993 sample.c     446             do{
  994 sample.c     447                     data = NIC_read(ISR);
  995 sample.c     448             }while((data & 0x40) == 0x00);
  996 sample.c     449     
  997 sample.c     450             NIC_write(CR,0x22);
  998 sample.c     451             boundary_page = current_page - 1;
  999 sample.c     452             if(boundary_page >= 0x60){
 1000 sample.c     453                     boundary_page -= (0x60 - 0x46);
 1001 sample.c     454             }
 1002 sample.c     455             NIC_write(BNRY,boundary_page);
 1003 sample.c     456     
 1004 sample.c     457             return 0;
 1005 sample.c     458     }
 1006 sample.c     459     void ARP_request(unsigned char *packet)
 1007 sample.c     460     {
 1008 sample.c     461             unsigned short i;
 1009 sample.c     462             ARP_PACKET *arp_packet;
 1010 sample.c     463             arp_packet = (ARP_PACKET *)packet;
 1011 sample.c     464             for (i = 0; i< 6; i++)
 1012 sample.c     465             {
 1013 sample.c     466                     arp_packet -> eth_dst_MAC[i] =0xFF;
 1014 sample.c     467             }
 1015 sample.c     468             for (i = 0; i < 6; i++)
 1016 sample.c     469             {
 1017 sample.c     470                     arp_packet -> eth_src_MAC[i] = src_MAC[i];
 1018 sample.c     471             }
 1019 sample.c     472             arp_packet -> eth_ethernet_type = 0x0806;
 1020 sample.c     473             arp_packet -> arp_hardware_type = 0x0001;
 1021 sample.c     474             arp_packet -> arp_protocol_type = 0x0800;
 1022 sample.c     475             arp_packet -> arp_hardware_length = 6;
 1023 sample.c     476             arp_packet -> arp_protocol_length = 4;
 1024 sample.c     477             arp_packet -> arp_operation = 1;
 1025 sample.c     478     
 1026 sample.c     479             for (i = 0; i < 6; i++)
 1027 sample.c     480             {
 1028 sample.c     481                     arp_packet -> arp_src_MAC[i] = src_MAC[i];
 1029 sample.c     482             }
 1030 sample.c     483             for (i = 0; i < 4; i++)
 1031 sample.c     484             {
 1032 sample.c     485                     arp_packet -> arp_src_IP[i] = src_IP[i];
 1033 sample.c     486             }
 1034 sample.c     487             for (i = 0; i < 6; i++)
 1035 sample.c     488             {
 1036 sample.c     489                     arp_packet -> arp_dst_MAC[i] = 0x00;
 1037 sample.c     490             }
 1038 sample.c     491             for (i = 0; i < 4; i++)
 1039 sample.c     492             {
 1040 sample.c     493                     arp_packet -> arp_dst_IP[i] = dst_IP[i];
 1041 sample.c     494             }
 1042 sample.c     495             packet_send(packet, 60);
 1043 sample.c     496     }
 1044 sample.c     497     void ARP_reply(unsigned char *packet)
 1045 sample.c     498     {
 1046 sample.c     499             unsigned short i;
 1047 sample.c     500             ARP_PACKET *arp_packet;
 1048 sample.c     501     
 1049 sample.c     502             arp_packet = (ARP_PACKET *)packet;
 1050 sample.c     503     
 1051 sample.c     504             for (i = 0; i < 6; i++){
 1052 sample.c     505                     arp_packet -> eth_dst_MAC[i] = arp_packet -> eth_src_MAC[i];
 1053 sample.c     506                     arp_packet -> eth_src_MAC[i] = src_MAC[i];
 1054 sample.c     507             }
 1055 sample.c     508             arp_packet -> arp_operation = 2;
 1056 sample.c     509             for (i = 0; i < 6; i++){
 1057 sample.c     510                     arp_packet -> arp_dst_MAC[i] = arp_packet -> arp_src_MAC[i];
 1058 sample.c     511                     arp_packet -> arp_src_MAC[i] = src_MAC[i];
 1059 sample.c     512             }
 1060 sample.c     513             for (i = 0; i < 4; i++){
 1061 sample.c     514                     arp_packet -> arp_dst_IP[i] = arp_packet -> arp_src_IP[i];
 1062 sample.c     515                     arp_packet -> arp_src_IP[i] = src_IP[i];
 1063 sample.c     516             }
 1064 sample.c     517     
 1065 sample.c     518             packet_send(packet, 60);
 1066 sample.c     519     }
 1067 sample.c     520     
 1068 sample.c     521     void Ping_reply(unsigned char *packet)
 1069 sample.c     522     {
 1070 sample.c     523             unsigned short i;
 1071 sample.c     524             unsigned long sum;
 1072 sample.c     525             PING_PACKET *ping_packet;
 1073 sample.c     526     
 1074 sample.c     527             ping_packet = (PING_PACKET *)packet;
 1075 sample.c     528     
 1076 sample.c     529             for (i = 0; i < 6; i++){
 1077 sample.c     530                     ping_packet -> eth_dst_MAC[i] = ping_packet -> eth_src_MAC[i];
 1078 sample.c     531                     ping_packet -> eth_src_MAC[i] = src_MAC[i];
 1079 sample.c     532             }
 1080 sample.c     533             for (i = 0; i < 4; i++){
 1081 sample.c     534                     ping_packet -> ip_dst_IP[i] = ping_packet -> ip_src_IP[i];
 1082 sample.c     535                     ping_packet -> ip_src_IP[i] = src_IP[i];
 1083 sample.c     536             }
 1084 sample.c     537             ping_packet -> ping_type = 0; /*pingリプライ*/
 1085 sample.c     538     
 1086 sample.c     539             /* 送信側におけるIPヘッダのチェックサムの計算 */
 1087 sample.c     540             ping_packet -> ip_checksum = 0x0000; /* チェックサムの初期値を0x0000にする */
 1088 sample.c     541             sum = ones_complement_sum(packet, 14, 20); /* 1の補数和(IPヘッダ) */
 1089 sample.c     542             sum = (~sum) & 0xFFFF; /* 計算結果をNOT演算によって反転する */
 1090 sample.c     543             ping_packet -> ip_checksum = (unsigned short)sum; /* 計算結果をセットする */
 1091 sample.c     544     
 1092 sample.c     545             /* 送信側におけるpingメッセージのチェックサムの計算 */
 1093 sample.c     546             ping_packet -> ping_checksum = 0x0000; /* チェックサムの初期値を0x0000にする */
 1094 sample.c     547             sum = ones_complement_sum(packet, 34, 40); /* 1の補数和(pingメッセージ) */
 1095 sample.c     548             sum = (~sum) & 0xFFFF; /* 計算結果をNOT演算によって反転する */
 1096 sample.c     549             ping_packet -> ping_checksum = (unsigned short)sum; /* 計算結果をセットする */
 1097 sample.c     550     
 1098 sample.c     551             packet_send(packet, (14 + 20 + 40)); /* パケットを送信する */
 1099 sample.c     552     }
 1100 sample.c     553     void main(void)
 1101 sample.c     554     {
 1102 sample.c     555             char str_src_MAC[13];
 1103 sample.c     556             char str_dst_IP[16];
 1104 sample.c     557             int i;
 1105 sample.c     558             ARP_PACKET *arp_packet;
 1106 sample.c     559             PING_PACKET *ping_packet;
 1107 sample.c     560             P1DDR |= 0x1F;
 1108 sample.c     561             P6DDR |= 0x30;
 1109 sample.c     562             PADDR |= 0x80;
 1110 sample.c     563             P4DDR = 0xF0;
 1111 sample.c     564             P4PCR = 0x0F;
 1112 sample.c     565             PBDDR = 0xF3;
 1113 sample.c     566     
 1114 sample.c     567             TCR1 = 0xA0;
 1115 sample.c     568             TCR2 = 0xA3;
 1116 sample.c     569             GRA1 = 0x13;
 1117 sample.c     570             GRA2 = 2499;
 1118 sample.c     571             TISRA |= 0x40;
 1119 sample.c     572             PADR = 0xFB;
 1120 sample.c     573             TSTR |= 0x04;
 1121 sample.c     574             src_IP[0] = 10;
 1122 sample.c     575             src_IP[1] = 1;
 1123 sample.c     576             src_IP[2] = 69;
 1124 sample.c     577             src_IP[3] = 139;
 1125 sample.c     578             dst_IP[0] = 10;
 1126 sample.c     579             dst_IP[1] = 1;
 1127 sample.c     580             dst_IP[2] = 69;
 1128 sample.c     581             dst_IP[3] = 149;
 1129 sample.c     582         NIC_init();
 1130 sample.c     583         LCD_init();
 1131 sample.c     584         ms_timer(3000);
 1132 sample.c     585             /*ARP_request(packet);*/
 1133 sample.c     586             while(1){
 1134 sample.c     587             if(packet_receive(packet) == 0){
 1135 sample.c     588                 arp_packet = (ARP_PACKET *)packet;
 1136 sample.c     589                 ping_packet = (PING_PACKET *)packet;
 1137 sample.c     590                 if(arp_packet -> eth_ethernet_type == 0x0806 && (strcmp(arp_packet -> arp_dst_IP, src_IP) == 0)){
 1138 sample.c     591                     IP_to_str(arp_packet -> arp_src_IP, str_dst_IP);
 1139 sample.c     592                     MAC_to_str(arp_packet -> arp_src_MAC, str_src_MAC);
 1140 sample.c     593                     ARP_reply(packet);
 1141 sample.c     594     
 1142 sample.c     595                     LCD_print(str_dst_IP);
 1143 sample.c     596                     LCD_control(0xc0);
 1144 sample.c     597                     LCD_print(str_src_MAC);
 1145 sample.c     598                 }
 1146 sample.c     599                 else if(strcmp(ping_packet -> ip_dst_IP) == 0){
 1147 sample.c     600                     Ping_reply(packet);
 1148 sample.c     601                 }
 1149 sample.c     602             }
 1150 sample.c     603         }
 1151 sample.c     604     
 1152 sample.c     605         while(1);
 1153 sample.c     606     }
H8S,H8/300 SERIES C COMPILER (Ver. 2.0D for Evaluation) 6-Feb-2015  12:30:47  PAGE   1

*********** ERROR INFORMATION **********

FILE NAME: sample.c

File        Line Erno Lvl  Message
sample.c      31 2404 (E)  ILLEGAL CHARACTER CODE: "80"
sample.c      36 2404 (E)  ILLEGAL CHARACTER CODE: "80"
sample.c     539 2404 (E)  ILLEGAL CHARACTER CODE: "80"
sample.c     539 2404 (E)  ILLEGAL CHARACTER CODE: "A0"
sample.c     539 2404 (E)  ILLEGAL CHARACTER CODE: "97"
sample.c     540 2404 (E)  ILLEGAL CHARACTER CODE: "A0"
sample.c     540 2404 (E)  ILLEGAL CHARACTER CODE: "92"
sample.c     541 2404 (E)  ILLEGAL CHARACTER CODE: "8C"
sample.c     541 2404 (E)  ILLEGAL CHARACTER CODE: "80"
sample.c     545 2404 (E)  ILLEGAL CHARACTER CODE: "A0"
sample.c     545 2404 (E)  ILLEGAL CHARACTER CODE: "97"
sample.c     546 2404 (E)  ILLEGAL CHARACTER CODE: "A0"
sample.c     546 2404 (E)  ILLEGAL CHARACTER CODE: "92"
sample.c     547 2404 (E)  ILLEGAL CHARACTER CODE: "8C"
sample.c     551 2404 (E)  ILLEGAL CHARACTER CODE: "80"
sample.c     590 1016 (W)  ARGUMENT MISMATCH
sample.c     590 1016 (W)  ARGUMENT MISMATCH
sample.c     599 1016 (W)  ARGUMENT MISMATCH
sample.c     599 2202 (E)  NUMBER OF PARAMETERS MISMATCH

NUMBER OF ERRORS:         16 
NUMBER OF WARNINGS:        3 
